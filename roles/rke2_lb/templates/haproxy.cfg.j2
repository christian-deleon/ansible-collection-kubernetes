global
    # Process management
    maxconn {{ rke2_lb_max_connections }}
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Performance tuning for WebSockets
    tune.bufsize {{ rke2_lb_buffer_size }}
    tune.maxrewrite 16384

    # Multi-threading (only for larger clusters)
    {% if rke2_lb_enable_multithreading %}
    nbthread {{ rke2_lb_thread_count }}
    {% endif %}

defaults
    mode tcp
    log global
    option tcplog
    option dontlognull

    # Critical timeout settings for WebSocket support
    timeout connect {{ rke2_lb_timeout_connect }}
    timeout client {{ rke2_lb_timeout_client }}
    timeout server {{ rke2_lb_timeout_server }}
    timeout tunnel {{ rke2_lb_timeout_tunnel }}  # For WebSocket tunnels

    # TCP keepalive options - critical for WebSockets
    option tcpka        # Enable TCP keepalive
    option clitcpka     # Client side keepalive
    option srvtcpka     # Server side keepalive

    # Connection behavior
    retries 3
    option redispatch   # Redistribute on failure
    maxconn {{ rke2_lb_max_connections }}

# Statistics endpoint (optional)
{% if rke2_lb_enable_stats %}
stats enable
stats uri /stats
stats refresh 30s
{% endif %}

# Kubernetes API Server Frontend (with WebSocket support)
frontend k8s-api
    bind {{ rke2_server }}:6443
    mode tcp
    option tcplog

    # TCP inspection for better connection handling
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }

    default_backend k8s-api-backend

# RKE2 Supervisor/Registration Endpoint
frontend rke2-supervisor
    bind {{ rke2_server }}:9345
    mode tcp
    option tcplog
    default_backend rke2-supervisor-backend

# Kubernetes API Backend with WebSocket optimization
backend k8s-api-backend
    mode tcp
    balance {{ rke2_lb_balance_algorithm }}

    # Session persistence - CRITICAL for WebSockets
{% if rke2_lb_enable_persistence %}
    stick-table type ip size {{ rke2_lb_stick_table_size }} expire {{ rke2_lb_stick_expire }}
    stick on src
{% endif %}

    # Health checking configuration
    # RKE2 API server returns 401 Unauthorized for /healthz without authentication
    # This is expected behavior and indicates the server is healthy
    # Note: HAProxy sends HTTP/1.0 requests, so servers respond with HTTP/1.0 401
    option tcp-check
    tcp-check connect port 6443 ssl
    tcp-check send GET\ /healthz\ HTTP/1.0\r\n\r\n
    tcp-check expect string "HTTP/1.0 401"  # Expect HTTP/1.0 401 Unauthorized response

    # Server configuration
    default-server inter {{ rke2_lb_check_interval }} fall {{ rke2_lb_check_fall }} rise {{ rke2_lb_check_rise }} maxconn {{ rke2_lb_server_maxconn }}

{% for host in groups['controlplane'] %}
    server node{{ loop.index0 }} {{ hostvars[host]['rke2_node_ip'] | default(hostvars[host]['ansible_default_ipv4']['address']) }}:6443 check check-ssl verify none
{% endfor %}

# RKE2 Supervisor Backend
backend rke2-supervisor-backend
    mode tcp
    balance {{ rke2_lb_balance_algorithm }}

{% if rke2_lb_enable_persistence %}
    stick-table type ip size {{ rke2_lb_stick_table_size }} expire 1h
    stick on src
{% endif %}

    # Health checking
    option tcp-check
    tcp-check connect port 9345 ssl

    default-server inter {{ rke2_lb_check_interval }} fall {{ rke2_lb_check_fall }} rise {{ rke2_lb_check_rise }} maxconn {{ rke2_lb_supervisor_maxconn }}

{% for host in groups['controlplane'] %}
    server node{{ loop.index0 }} {{ hostvars[host]['rke2_node_ip'] | default(hostvars[host]['ansible_default_ipv4']['address']) }}:9345 check check-ssl verify none
{% endfor %}
