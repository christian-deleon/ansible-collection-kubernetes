#!/bin/bash
#
# HAProxy health check script for Keepalived
# Checks both HAProxy process and API endpoint availability
#

# Configuration
HAPROXY_PID_FILE="/var/run/haproxy.pid"
HAPROXY_STATS_SOCKET="/run/haproxy/admin.sock"
API_ENDPOINT="https://{{ rke2_server }}:6443/healthz"
LOG_TAG="check_haproxy"

# Logging function
log_message() {
    logger -t "${LOG_TAG}" "$1"
}

# Check if HAProxy process is running
check_haproxy_process() {
    if [ -f "${HAPROXY_PID_FILE}" ]; then
        local pid=$(cat "${HAPROXY_PID_FILE}")
        if kill -0 "${pid}" 2>/dev/null; then
            return 0
        else
            log_message "HAProxy PID file exists but process ${pid} is not running"
            return 1
        fi
    else
        log_message "HAProxy PID file not found"
        return 1
    fi
}

# Check HAProxy stats socket
check_haproxy_stats() {
    if [ -S "${HAPROXY_STATS_SOCKET}" ]; then
        local result=$(echo "show info" | socat stdio "${HAPROXY_STATS_SOCKET}" 2>/dev/null | grep -c "Name: HAProxy")
        if [ "${result}" -eq 1 ]; then
            return 0
        else
            log_message "HAProxy stats socket not responding properly"
            return 1
        fi
    else
        log_message "HAProxy stats socket not found"
        return 1
    fi
}

# Check API endpoint (basic connectivity)
check_api_endpoint() {
    # Use curl to check if we can connect (expect 401 or 403, which means service is up)
    local http_code=$(curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 3 --max-time 5 "${API_ENDPOINT}" 2>/dev/null)

    # API server should return 401 (unauthorized) or 403 (forbidden) when healthy
    if [ "${http_code}" = "401" ] || [ "${http_code}" = "403" ] || [ "${http_code}" = "200" ]; then
        return 0
    else
        log_message "API endpoint check failed with HTTP code: ${http_code}"
        return 1
    fi
}

# Main health check logic
main() {
    local exit_code=0

    # Check HAProxy process
    if ! check_haproxy_process; then
        log_message "HAProxy process check failed"
        exit_code=1
    fi

    # Check HAProxy stats socket
    if ! check_haproxy_stats; then
        log_message "HAProxy stats socket check failed"
        exit_code=1
    fi

    # Check API endpoint connectivity
    if ! check_api_endpoint; then
        log_message "API endpoint connectivity check failed"
        exit_code=1
    fi

    # Log success if all checks pass
    if [ ${exit_code} -eq 0 ]; then
        # Only log success occasionally to reduce log noise
        if [ $((RANDOM % 60)) -eq 0 ]; then
            log_message "All health checks passed"
        fi
    fi

    exit ${exit_code}
}

# Run the main function
main "$@"
